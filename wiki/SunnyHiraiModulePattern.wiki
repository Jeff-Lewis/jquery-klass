#summary Sunny Hirai's Version of the Module Pattern

= Sunny Hirai's Module Pattern =

The purpose of this article is to show you a useful variation on the !JavaScript module pattern introduced by Douglas Crockford.

While the module pattern works well, it can be modified to increase code quality, improve readability and reduce some types of bugs.

Some problems are:

  * Ambiguity in where to place 'constructor' code (differs depending on what the constructor's role)
  * Different ways to call public and private members means you have to remember two things: (1) The name of the member and (2) whether it is public or private.
  * Since public/private members are scoped differently, it takes time to convert a member from public to private and visa versa. This is exasperated by the fact that you don't always know ahead of time whether a member should be public or private.
  * The pattern is not self documenting and hence usually requires commenting
  * The pattern is a little ugly (you know what I mean)

=== Animal Module ===

To demonstrate the regular Module Pattern and my modified version, I've created a simple animal class. It has the following members:

  * 'name' which is private
  * 'output' a private method to output text to the user
  * 'say' a public method
  * 'howl' a public method that calls 'say'

=== Module Pattern ===

{{{
  Animal = function( name ){
    // private variables
    var name = name;
    // private functions
    function output( msg ){
      alert( msg );
    }
    // public members
    return {
      say: function( msg ){
        output( name + ': ' + msg );
      },
      howl: function( msg ){
        returnObject.say( 'awoooo... ' + msg );
      }
    };
  }
}}}

=== Sunny Hirai's Module Pattern ===

{{{
  Animal = function( name ){
    var me = {
      init: function(){
        me.name = name;
      },
      output: function( msg ){
        alert( msg );
      },
      say: function( msg ){
        me.output( me.name + ': ' + msg );
      },
      howl: function( msg ){
        me.output( me.name + ': awoooo... ' + msg );
      }
    }
    me.init();
    return { say: me.say, howl: me.howl };
  }
}}}

== Differences ==

Although subtle, there are several important benefits to this pattern that (a) reduces the kinds of bugs you might encounter (b) makes playing easier and (c) makes the code more readable.

  # The first declaration is the object "me".
  # The first method in "me" is "init"
  # "me.init()" is called immediately after the declaration
  # "$.limitKeys" is called during the return

== Comparison ==

Let's take a look at the same code 