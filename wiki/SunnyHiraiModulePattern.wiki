#summary Sunny Hirai's Version of the Module Pattern

= Sunny Hirai's Module Pattern =

Inspired by Douglas Crockford's articles on the Module Pattern with a healthy dosage of pragmatism added.

The purpose of this article is to show you a variation on the standard !JavaScript module pattern. While this pattern works great, I found it hard to do agile programming with it. Some of the problems where:

  * The pattern is not self documenting so you often see lots of comments
  * Difficulty in knowing where to place init code
  * Difficulty in knowing what to pass when you need to pass the object instance during initialization
  * Problems caused by different name spaces for public and private functions/variables:
  ** Converting a function or variable from public to private and visa versa is time consuming
  ** Often you don't know at the time you are writing whether it should be public or private
  ** When writing a new line of code that references a member, you always need to know the name of the member and also how it is scoped.

=== Module Pattern ===

{{{
$.extend({
  animal: function( name ){
    // private variables
    var name = name;
    // private functions
    function output( msg ){
      alert( msg );
    }
    // public members
    var returnObject = {
      say: function( msg ){
        output( name + ': ' + msg );
      },
      howl: function( msg ){
        output( name + ': awoooo... ' + msg );
      }
    }
    return returnObject;
  }
})
}}}


=== Sunny Hirai's Module Pattern ===

{{{
$.extend({
  animal: function( name ){
    var me = {
      init: function(){
        me.name = name;
      },
      output: function( msg ){
        alert( msg );
      },
      say: function( msg ){
        me.output( me.name + ': ' + msg );
      },
      howl: function( msg ){
        me.output( me.name + ': awoooo... ' + msg );
      }
    }
    me.init();
    return $.limitKeys( me, 'say', 'howl' );
  }
})
}}}



Although subtle, there are several important benefits to this pattern that (a) reduces the kinds of bugs you might encounter (b) makes playing easier and (c) makes the code more readable.

  # The first declaration is the object "me".
  # The first method in "me" is "init"
  # "me.init()" is called immediately after the declaration
  # "$.limitKeys" is called during the return

== Comparison ==

Let's take a look at the same code 