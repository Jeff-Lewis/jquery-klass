#summary Sunny Hirai's Version of the Module Pattern

= Sunny Hirai's Module Pattern =

The purpose of this article is to show you a useful variation on the !JavaScript module pattern introduced by Douglas Crockford.

While the module pattern works well, it can be modified to increase code quality, improve readability and reduce some types of bugs.

Some problems are:

  * Ambiguity in where to place 'constructor' code (differs depending on the constructor's role)
  * Different ways to call public and private members means you have to remember the member's scope before referring to it.
  * Since public/private members are declared differently, it takes time to convert a member from public to private and visa versa. This is exasperated by the fact that you don't always know ahead of time whether a member should be public or private.
  * The pattern is not self documenting and prefers commenting
  * The pattern is a little ugly (though some like its raggedness)

=== Animal Module ===

To demonstrate the regular Module Pattern and my modified version, I've created a simple animal class. It has the following members:

  * 'name' which is private
  * 'output' a private method to output text to the user
  * 'say' a public method
  * 'howl' a public method that calls 'say'

=== Module Pattern ===

{{{
  Animal = function( name ){

    // private variables
    var name = name;

    // private functions
    function output( msg ){
      alert( msg );
    }

    // public members
    return {
      say: function( msg ){
        output( name + ': ' + msg );
      },
      howl: function( msg ){
        returnObject.say( 'awoooo... ' + msg );
      }
    };
  }
}}}

=== Sunny Hirai's Module Pattern ===

{{{

  Animal = function( name ){
    var me = {
      init: function(){
        me.name = name;
      },
      output: function( msg ){
        alert( msg );
      },
      say: function( msg ){
        me.output( me.name + ': ' + msg );
      },
      howl: function( msg ){
        me.say( 'awoooo... ' + msg );
      }
    }
    me.init();
    return { say: me.say, howl: me.howl }; // public methods
  }

  // NOTE: Nice return {} alternate below for about 200 bytes of code.
  // jQuery users could add it as a $.limitKeys plugin
  // return limitKeys( me, 'say', 'howl' )

}}}

== Differences ==

Now that you've seen the code, here are the benefits of the new module pattern.

  # *Neat:* It's nice and neat and easier to read. It's easy to see what all the methods are because they are all together and nicely formatted. The module pattern is a little more efficient (less lines of code) but the private functions are declared quite differently from the public ones.

=== Constructors Without Thinking ===

Where should the constructor code go in the module pattern? Is it before the public object declaration, after or both before and after?

The answer is it depends on what it does. By convention, it's nice to have the constructor code at the top since it is the first thing that is done; however, if the constructor calls a public method in the public object (e.g. 'say' or 'howl') then the constructor needs to go below. This is because the public methods do not exist until after they are declared.

This isn't a big deal when the module is small (as ours is), but as the complexity of the module grows, it becomes difficult to keep track of why some constructor methods are above and others below the public definition.

The variation on the module pattern sidesteps all of this by defining all the members first including the constructor (which I've named 'init') and then executes 'me.init()'.

This ensures that the 'me' object and all its methods exist, both public and private.

This also solves the problem of having to send the 'me' object as a reference in the constructor. For example, let's say the 'me' object needs to register itself in an 'AnimalKingdom' module. It registers itself by sending a reference to itself to the 'AnimalKingdom' module.

=== Last Minute Private Variables ===

There are a few benefits and one caveat to creating a sub-object and releasing that as your public object. The first benefit is that during development, you can return the entire object and therefore every member is public. This is great during development because it makes it easy to inspect your object. When you are ready to release the code as production code, you choose at that time which methods should be kept private.

In our Animal example, let's say we wanted to make the 'say' method private. Here's the change in the new Module Pattern.

{{{
- return { say: me.say, howl: me.howl };
+ return { howl: me.howl };
}}}

In the original module pattern, this is the change.

{{{
- say: function( msg ){
-   output( name + ': ' + msg );
- },
+ function say( msg ){
+   output( name + ': ' + msg );
+ }
// Also in the howl method
- me.say( 'awoooo... ' + msg );
+ say( 'awoooo... ' + msg );
}}}

In a real module, there could be more methods that call 'say' or whatever method you decide to change the scope of.

=== Gotcha of Last Minute Private Variables ===

One gotcha of returning a different object for public consumption is that values will not be accessible in the public object. For example, you might get a copy of the 'name' variable in the public object, but if you change the 'name' variable's value, it won't change in the 'me' object.

The solution is to never expose variables in the public object. Although this is a gotcha, in some ways it encourages better Object Oriented Programming. All variables shall be accessed by getters and setters. In the short-run, I sometimes find this annoying but in the long run, getters and setters saves me and I've found I've always just started using them, even before I created this pattern.

=== Better Iterative Development ===

Although subtle, there are several important benefits to this pattern that (a) reduces the kinds of bugs you might encounter (b) makes playing easier and (c) makes the code more readable.

  # The first declaration is the object "me".
  # The first method in "me" is "init"
  # "me.init()" is called immediately after the declaration
  # "$.limitKeys" is called during the return

== Comparison ==

Let's take a look at the same code 

  function limitKeys( source ){
    var dest = {}, key;
    for (var i=1;i<arguments.length;i++){
      key = arguments[i];
      dest[ key ] = source[ key ];
    }
    return dest;
  }